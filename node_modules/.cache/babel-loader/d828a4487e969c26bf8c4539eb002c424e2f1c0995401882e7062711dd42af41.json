{"ast":null,"code":"var _jsxFileName = \"/Users/jakubstadnik/Desktop/AKZ web/web/src/Pages/Details.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Footer from \"../Components/Footer\";\nimport Header from \"../Components/Header\";\n\n// Define the cleanTitle function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction cleanTitle(title) {\n  return title.toLowerCase().replace(/[^\\w\\s]/g, \"\").replace(/\\s+/g, \"-\");\n}\nconst Details = ({\n  services\n}) => {\n  _s();\n  const {\n    title\n  } = useParams();\n\n  // Clean the title without diacritics and non-word characters\n  const cleanedTitle = cleanTitle(title);\n\n  // Find the service based on the cleaned title\n  const service = services.find(service => cleanTitle(service.title) === cleanedTitle);\n  if (!service) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Service not found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      background: true,\n      title: service.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: service.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), service.text.map((paragraph, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: paragraph\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: service.infoListTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: service.infoList.map((info, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: info\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Details, \"gF8BQ7pbS2fZBw1FFV94ESvKwxQ=\", false, function () {\n  return [useParams];\n});\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","useParams","Footer","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","cleanTitle","title","toLowerCase","replace","Details","services","_s","cleanedTitle","service","find","children","fileName","_jsxFileName","lineNumber","columnNumber","background","className","text","map","paragraph","index","infoListTitle","infoList","info","_c","$RefreshReg$"],"sources":["/Users/jakubstadnik/Desktop/AKZ web/web/src/Pages/Details.js"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Footer from \"../Components/Footer\";\nimport Header from \"../Components/Header\";\n\n// Define the cleanTitle function\nfunction cleanTitle(title) {\n  return title\n    .toLowerCase()\n    .replace(/[^\\w\\s]/g, \"\")\n    .replace(/\\s+/g, \"-\");\n}\n\nconst Details = ({ services }) => {\n  const { title } = useParams();\n\n  // Clean the title without diacritics and non-word characters\n  const cleanedTitle = cleanTitle(title);\n\n  // Find the service based on the cleaned title\n  const service = services.find(\n    (service) => cleanTitle(service.title) === cleanedTitle\n  );\n\n  if (!service) {\n    return <div>Service not found.</div>;\n  }\n\n  return (\n    <>\n      <Header background={true} title={service.title} />\n      <main>\n        <div className=\"details\">\n          <h2>{service.title}</h2>\n          {service.text.map((paragraph, index) => (\n            <p key={index}>{paragraph}</p>\n          ))}\n          <h3>{service.infoListTitle}</h3>\n          <ul>\n            {service.infoList.map((info, index) => (\n              <li key={index}>{info}</li>\n            ))}\n          </ul>\n          {/* You can add more components here to display other data like images */}\n        </div>\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nexport default Details;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,UAAUA,CAACC,KAAK,EAAE;EACzB,OAAOA,KAAK,CACTC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;AACzB;AAEA,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM;IAAEL;EAAM,CAAC,GAAGR,SAAS,CAAC,CAAC;;EAE7B;EACA,MAAMc,YAAY,GAAGP,UAAU,CAACC,KAAK,CAAC;;EAEtC;EACA,MAAMO,OAAO,GAAGH,QAAQ,CAACI,IAAI,CAC1BD,OAAO,IAAKR,UAAU,CAACQ,OAAO,CAACP,KAAK,CAAC,KAAKM,YAC7C,CAAC;EAED,IAAI,CAACC,OAAO,EAAE;IACZ,oBAAOX,OAAA;MAAAa,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;EAEA,oBACEjB,OAAA,CAAAE,SAAA;IAAAW,QAAA,gBACEb,OAAA,CAACF,MAAM;MAACoB,UAAU,EAAE,IAAK;MAACd,KAAK,EAAEO,OAAO,CAACP;IAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDjB,OAAA;MAAAa,QAAA,eACEb,OAAA;QAAKmB,SAAS,EAAC,SAAS;QAAAN,QAAA,gBACtBb,OAAA;UAAAa,QAAA,EAAKF,OAAO,CAACP;QAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACvBN,OAAO,CAACS,IAAI,CAACC,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,kBACjCvB,OAAA;UAAAa,QAAA,EAAgBS;QAAS,GAAjBC,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAC9B,CAAC,eACFjB,OAAA;UAAAa,QAAA,EAAKF,OAAO,CAACa;QAAa;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChCjB,OAAA;UAAAa,QAAA,EACGF,OAAO,CAACc,QAAQ,CAACJ,GAAG,CAAC,CAACK,IAAI,EAAEH,KAAK,kBAChCvB,OAAA;YAAAa,QAAA,EAAiBa;UAAI,GAAZH,KAAK;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAC3B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACPjB,OAAA,CAACH,MAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACV,CAAC;AAEP,CAAC;AAACR,EAAA,CApCIF,OAAO;EAAA,QACOX,SAAS;AAAA;AAAA+B,EAAA,GADvBpB,OAAO;AAsCb,eAAeA,OAAO;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}